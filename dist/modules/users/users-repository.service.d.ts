import { UserEntity } from 'src/core/database/entities/user/user.entity';
import { LoginDto } from '../auth/dto/login.dto.interface';
import { AilmentEntity } from 'src/core/database/entities/ailments/ailment.entity';
import { UserAilmentsEntity } from 'src/core/database/entities/user-ailments/user-ailments.entity';
import { DoseTakenEntity } from 'src/core/database/entities/doses_taken/dose-taken.entity';
import { UserAilmentsProductEntity } from 'src/core/database/entities/user-fact-info/user-ailments-product/user-ailments-product.entity';
import { UserSettingEntity } from 'src/core/database/entities/user-setting/user-setting.entity';
import { UserFactInfoEntity } from 'src/core/database/entities/user-fact-info/user-fact-info.entity';
import { MembershipsUsersEntity } from 'src/core/database/entities/memberships-users/memberships-users-entity';
export declare class UsersRepositoryService {
    private readonly userRepository;
    private readonly ailmentsRepository;
    private readonly userAilmentsRepository;
    private readonly userAilmentsProductsRepository;
    private readonly doseTakenRepository;
    private readonly userSettingRepository;
    private readonly userFactInfoRepository;
    private readonly membershipsUsersEntity;
    constructor(userRepository: typeof UserEntity, ailmentsRepository: typeof AilmentEntity, userAilmentsRepository: typeof UserAilmentsEntity, userAilmentsProductsRepository: typeof UserAilmentsProductEntity, doseTakenRepository: typeof DoseTakenEntity, userSettingRepository: typeof UserSettingEntity, userFactInfoRepository: typeof UserFactInfoEntity, membershipsUsersEntity: typeof MembershipsUsersEntity);
    findAll(): Promise<UserEntity[]>;
    findOneById(id: number): Promise<UserEntity>;
    findUsersByIds(ids: number[]): Promise<UserEntity[]>;
    findLogin(loginDto: LoginDto): Promise<UserEntity>;
    findUserByEmail(email: string): Promise<UserEntity>;
    save(data: UserEntity): Promise<UserEntity>;
    update(data: UserEntity): Promise<number[]>;
    updateOpenPayId(userId: any, openPayId: any): Promise<[affectedCount: number]>;
    findAilments(userId: any): Promise<any>;
    getProductsAilments(id: any): Promise<any>;
    getProductByUserAilments(id: any): Promise<UserAilmentsProductEntity>;
    updateProductByUserAilments(id: number, data: UserAilmentsProductEntity): Promise<[affectedCount: number]>;
    addAilments(data: UserAilmentsEntity): Promise<UserAilmentsEntity>;
    getUserAilments(id: number): Promise<UserAilmentsEntity>;
    viewDoseTakenByDate(userAilmentsId: number): Promise<DoseTakenEntity[]>;
    createDoseTaken(data: DoseTakenEntity): Promise<DoseTakenEntity>;
    getSettings(id: number): Promise<{
        id: any;
        settingId: any;
        code: any;
        value: any;
    }[]>;
    findUserSetting(userId: number, settingId: number): Promise<UserSettingEntity>;
    createSetting(data: UserSettingEntity): Promise<UserSettingEntity>;
    updateSetting(id: any, value: any): Promise<[affectedCount: number]>;
    findUserSettingById(id: any): Promise<UserSettingEntity>;
    createFactInfo(data: UserFactInfoEntity): Promise<UserFactInfoEntity>;
    updateFactInfo(id: number, value: UserFactInfoEntity): Promise<[affectedCount: number]>;
    getFactInfoByUserId(userId: number): Promise<UserFactInfoEntity>;
    getCurrentMemberships(userId: number): Promise<any>;
    getMembershipsByUser(userId: number): Promise<any[]>;
    disabledMemberships(userId: number): Promise<[affectedCount: number]>;
    saveMemberships(userId: number, membershipsId: number, expirationDate: Date, isFree: number): Promise<MembershipsUsersEntity>;
    saveGiftMemberships(userId: number, membershipsId: number, expirationDate: Date): Promise<MembershipsUsersEntity>;
    turnOnWinMemberships(id: number): Promise<[affectedCount: number]>;
    turnOffWinMemberships(id: number): Promise<[affectedCount: number]>;
}
